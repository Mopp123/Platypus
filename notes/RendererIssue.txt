What does rendering require (secondary cmd buf level, where actually calling render commands)
    *Mesh data
    *Component data
    *Misc. data
        -additional vertex buffers (for example: instancing)
        -additional uniform buffers + descriptors (for example: skeletal animation)

Same as above but lower level:
    *pipeline
    *vertex buffers
    *index buffers
    *descriptor sets
    *push constants

    It's that simple!
        BUT how to render multiple instances?
            Separate rendering methods:
                *"dumb rendering"
                *instanced rendering
                BUT How to figure out which one to use?
                    -> Mesh type? Renderable type?

            Who decides when to use instancing?
                ->Not the user(?)
                    ->Look at incomming data:
                        ->check components and figure out from there
                            ->attempt to animate if has Animation component

        *Descriptor sets needs to live somewhere (for example: joint uniform buffer)
            -> Material specific stuff lives inside the Material asset
            -> Animation specific lives inside the Animation asset
                *The DescriptorSetLayout could live statically somewhere around there:D

            BUT how does something like "foliage rendering" work with wind, etc?
                -> Separate foliage material

IDEAS:
    *A "dumb" renderer that just deals with different kinds of primitives(buffers, descriptor sets, etc) and "batching method",
    where some other system dispatches the primitives for the "dumb renderer"

Issue:
*Each renderer works so differently
    -> theres no reason to try forcing them work the same way?
